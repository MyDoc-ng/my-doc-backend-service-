generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum UserTypes {
  ADMIN
  USER
  DOCTOR
}

enum SessionType {
  CHAT
  AUDIO
  VIDEO
  CLINIC
  HOME
}

enum AppointmentStatus {
  PENDING
  UPCOMING
  COMPLETED
  CONFIRMED
  CANCELLED
}

enum TransactionType {
  TOP_UP
  CONSULTATION
  REFERRAL
}

model User {
  id                String           @id @default(uuid())
  name              String
  email             String           @unique
  password          String?
  dateOfBirth       DateTime?        @db.Date
  gender            Gender           @default(MALE)
  phoneNumber       String?          @unique
  address           String?
  medicalHistory    MedicalHistory[]
  emailVerified     Boolean          @default(false) // Add this
  verificationToken String? // Store Verification Token
  profilePicture    String? // Photo URL
  googleId          String?          @unique
  facebookId        String?          @unique
  appointments      Consultation[]
  medicalRecords    MedicalRecord[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Payments     Payment[]
  RefreshToken RefreshToken[]

  @@map("users")
}

model MedicalHistory {
  id            String  @id @default(uuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pastSurgeries Boolean
  currentMeds   Boolean
  drugAllergies Boolean

  @@map("medical_histories")
}

model Doctor {
  id                    String               @id @default(uuid())
  name                  String?
  email                 String               @unique
  experience            Int?
  ratings               Float?               @default(0)
  certifications        String?
  location              String?
  consultationTypes     SessionType[]
  consultationFees      Float?
  homeVisitCharge       Float? // added based on distance
  videoConsultationFee  Float?
  clinicConsultationFee Float?
  availability          DoctorAvailability[]
  isOnline              Boolean              @default(false)
  lastActive            DateTime?
  bio                   String?
  accessToken           String?
  refreshToken          String?
  password              String?
  googleId              String?
  consultations         Consultation[]
  MedicalRecord         MedicalRecord[]
  specialtyId           String?
  specialty             Specialty?           @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  Payment               Payment[]
  googleCalendarId      String? // Doctor's Google Calendar ID
  googleRefreshToken    String? // Doctor's Google OAuth2 Refresh Token

  @@map("doctors")
}

model MedicalRecord {
  id                  String            @id @default(uuid())
  patientId           String
  patient             User              @relation(fields: [patientId], references: [id])
  doctorId            String?
  doctor              Doctor?           @relation(fields: [doctorId], references: [id])
  consultationSummary String?
  diagnosis           String?
  treatmentPlan       String?
  prescriptions       Prescription[]
  labResults          LabResult[]
  radiologyReports    RadiologyReport[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("medical_records")
}

model Prescription {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicationName  String
  dosage          String
  frequency       String
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("prescriptions")
}

model LabResult {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  testName        String
  result          String
  referenceRange  String?
  reportUrl       String? // URL to the lab report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("lab_results")
}

model RadiologyReport {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  studyType       String
  finding         String?
  impression      String?
  reportUrl       String? // URL to the radiology report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("radiology_reports")
}

model ChatMessage {
  id           String   @id @default(uuid())
  senderId     String
  senderType   UserTypes // "User" or "Doctor"
  receiverId   String // The ID of the recipient
  receiverType UserTypes // "User" or "Doctor"
  content      String
  attachments  String? // JSON or URL of attachments
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("chat_messages")
}

model Consultation {
  id               String            @id @default(uuid())
  doctorId         String
  patientId        String
  status           AppointmentStatus @default(PENDING)
  consultationType SessionType
  googleMeetLink   String?
  notes            String?
  startTime        DateTime
  endTime          DateTime
  googleEventId    String? // ID of the event in Google Calendar
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  patient User   @relation(fields: [patientId], references: [id])
  doctor  Doctor @relation(fields: [doctorId], references: [id])

  @@map("consultations")
}

model Specialty {
  id      String   @id @default(uuid())
  name    String   @unique()
  doctors Doctor[]

  @@map("specialties")
}

model DoctorAvailability {
  id       String   @id @default(uuid())
  doctorId String
  date     DateTime
  time     String // Store time as a string like "10:00 AM", "11:00 AM"

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("doctor_availabilities")
}

model Payment {
  id            String   @id @default(uuid())
  patientId     String
  doctorId      String
  amount        Float
  status        String   @default("pending") // pending, successful, failed
  transactionId String
  createdAt     DateTime @default(now())

  patient User   @relation(fields: [patientId], references: [id])
  doctor  Doctor @relation(fields: [doctorId], references: [id])

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Polymorphic Relationship
  recipientId   String
  recipientType RecipientType

  @@index([recipientId, recipientType])
}

enum NotificationType {
  APPOINTMENT_SUCCESS
  APPOINTMENT_SCHEDULED
  APPOINTMENT_RESCHEDULED
  APPOINTMENT_CANCELLED
  APPOINTMENT_REMINDER
  NEW_MESSAGE
  VIDEO_CALL
  SCHEDULE_CHANGED
  ACCOUNT_APPROVED
  ACCOUNT_REJECTED
}

enum RecipientType {
  USER
  ADMIN
  DOCTOR
}
