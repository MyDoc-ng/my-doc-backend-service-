// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Roles {
  ADMIN
  USER
  DOCTOR
}

enum ConsultationType {
  Messaging
  AudioCall
  VideoCall
}

enum AppointmentType {
  Urgent
  NonUrgent
}

enum AppointmentStatus {
  Pending
  InProgress
  Completed
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String?
  dateOfBirth    DateTime?        @db.Date
  gender         Gender           @default(MALE)
  role           Roles            @default(USER)
  phoneNumber    String?          @unique
  address        String?
  medicalHistory MedicalHistory[]
  otp            String? // OTP for phone verification
  isVerified     Boolean?         @default(false)
  photo          String? // Photo URL
  googleId       String?          @unique
  appleId        String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("users")
}

model MedicalHistory {
  id            String  @id @default(uuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pastSurgeries Boolean
  currentMeds   Boolean
  drugAllergies Boolean
}

model Doctor {
  id           String        @id @default(uuid())
  name         String
  specialty    String
  experience   Int // In years
  ratings      Float // Decimal value for ratings
  bio          String // About the doctor
  profilePic   String // URL of the profile picture
  appointments Appointment[] // Relation to appointments
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("doctors")
}

model Appointment {
  id               String               @id @default(uuid())
  type             AppointmentType   @default(Urgent)
  patientName      String
  patientEmail     String
  symptoms         String[] // List of symptoms as a JSON or text
  consultationType ConsultationType  @default(Messaging)
  doctorId         String
  doctor           Doctor            @relation(fields: [doctorId], references: [id])
  status           AppointmentStatus @default(Pending)
  createdAt        DateTime          @default(now())
  date             String            // Date of the appointment
  time             String             // Time of the appointment
}
