generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum ApprovalStatus {
  PENDING
  ACTIVATED
  REJECTED
  DEACTIVATED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  ESCALATED
}

enum UserTypes {
  ADMIN
  PATIENT
  DOCTOR
}

enum SessionType {
  CHAT
  AUDIO
  VIDEO
  CLINIC
  HOME
}

enum AppointmentStatus {
  PENDING
  COMPLETED
  CONFIRMED
  UPCOMING
  CANCELLED
}

enum TransactionType {
  TOP_UP
  CONSULTATION
  REFERRAL
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  FAILED
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RegistrationStep {
  CREATE_ACCOUNT
  VERIFY_EMAIL
  CREATE_BIODATA
  PROVIDE_MEDICAL_CERTIFICATIONS
  COMPLIANCE_AND_SECURITY_CHECK
  PROFILE_COMPLETE
}

enum NotificationType {
  VIDEO_CALL
  NEW_MESSAGE
  SCHEDULE_CHANGED
  ACCOUNT_APPROVED
  ACCOUNT_REJECTED
  APPOINTMENT_SUCCESS
  APPOINTMENT_REMINDER
  APPOINTMENT_SCHEDULED
  APPOINTMENT_RESCHEDULED
  APPOINTMENT_CANCELLED
}

model User {
  id                   String         @id @default(uuid())
  name                 String
  email                String         @unique
  password             String?
  emailVerified        Boolean        @default(false)
  verificationToken    String?        @unique
  resetPasswordToken   String?        @unique
  resetPasswordExpires DateTime?
  googleId             String?        @unique
  facebookId           String?        @unique
  isProfileComplete    Boolean        @default(false)
  profilePicture       String?
  dateOfBirth          String?
  gender               Gender         @default(MALE)
  address              String?
  isOnline             Boolean        @default(false)
  phoneNumber          String?        @unique
  lastActive           DateTime?
  approvalStatus       ApprovalStatus @default(PENDING)
  approvedAt           DateTime?
  rejectedAt           DateTime?
  deactivatedAt        DateTime?

  patientProfile   PatientProfile?
  doctorProfile    DoctorProfile?
  adminProfile     AdminProfile?
  BankAccount      BankAccount?
  registrationStep RegistrationStep @default(CREATE_ACCOUNT)

  PatientReviews          Review[]         @relation(name: "PatientReviews")
  DoctorReviews           Review[]         @relation(name: "DoctorReviews")
  RefreshToken            RefreshToken[]
  DoctorPayments          Payment[]        @relation(name: "DoctorPayments")
  PatientPayments         Payment[]        @relation(name: "PatientPayments")
  MedicalHistory          MedicalHistory[]
  MedicalRecord           MedicalRecord[]
  doctorConsultations     Consultation[]   @relation(name: "DoctorConsultations")
  patientConsultations    Consultation[]   @relation(name: "PatientConsultations")
  ReceiverMessages        ChatMessage[]    @relation(name: "ReceiverMessages")
  SenderMessages          ChatMessage[]    @relation(name: "SenderMessages")
  Withdrawal              Withdrawal[]
  specialistReferral      Referral[]       @relation(name: "specialistReferral")
  patientReferral         Referral[]       @relation(name: "patientReferral")
  referringDoctorReferral Referral[]       @relation(name: "referringDoctorReferral")
  Notification            Notification[]
  roles                   UserRole[]
  PatientDisputes         Dispute[]        @relation(name: "PatientDisputes")
  DoctorDisputes          Dispute[]        @relation(name: "DoctorDisputes")

  rejectionReasons    Json?
  deactivationReasons Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model PatientProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  experience                   Int?
  certifications               String?
  location                     String?
  consultationTypes            SessionType[]
  consultationFees             Float?
  homeVisitFee                 Float?
  clinicConsultationFee        Float?
  availability                 DoctorAvailability[]
  bio                          String?
  referenceDoc                 String?
  cvDoc                        String?
  idDoc                        String?
  medicalLicenseDoc            String?
  specializationCertDoc        String?
  isApproved                   Boolean              @default(false)
  balance                      Float                @default(0)
  googleCalendarId             String?
  googleRefreshToken           String?
  canUseVideoConsultationTools String?
  hasInternetEnabledDevice     String?
  termsAccepted                Boolean              @default(false)
  termsAcceptedAt              DateTime?

  specialtyId String?
  specialty   Specialty? @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  permissions String[] // List of admin permissions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalHistory {
  id            String @id @default(uuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pastSurgeries String
  currentMeds   String
  drugAllergies String

  @@map("medical_histories")
}

model MedicalRecord {
  id                  String            @id @default(uuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultationSummary String?
  diagnosis           String?
  treatmentPlan       String?
  prescriptions       Prescription[]
  labResults          LabResult[]
  radiologyReports    RadiologyReport[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("medical_records")
}

model Prescription {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicationName  String
  dosage          String
  frequency       String
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("prescriptions")
}

model LabResult {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  testName        String
  result          String
  referenceRange  String?
  reportUrl       String? // URL to the lab report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("lab_results")
}

model RadiologyReport {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  studyType       String
  finding         String?
  impression      String?
  reportUrl       String? // URL to the radiology report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("radiology_reports")
}

model ChatMessage {
  id          String    @id @default(uuid())
  senderId    String?
  receiverId  String?
  dSenderId   String?
  dReceiverId String?
  content     String?
  attachments Json? // Store multiple file URLs or metadata
  voiceUrl    String?
  readAt      DateTime? // When the message was read
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relationships
  sender   User? @relation(fields: [senderId], references: [id], name: "SenderMessages", onDelete: SetNull)
  receiver User? @relation(fields: [receiverId], references: [id], name: "ReceiverMessages", onDelete: SetNull)

  @@map("chat_messages")
}

model Consultation {
  id                 String            @id @default(uuid())
  doctorId           String?
  patientId          String?
  dDoctorId          String?
  paymentId          String?
  dPatientId         String?
  status             AppointmentStatus @default(PENDING)
  consultationType   SessionType
  googleMeetLink     String?
  notes              String?
  startTime          DateTime
  endTime            DateTime
  googleEventId      String? // ID of the event in Google Calendar
  cancellationReason String? // Store the reason

  cancelledAt DateTime? // Track cancellation time
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  patient  User?     @relation(fields: [patientId], references: [id], name: "PatientConsultations", onDelete: SetNull)
  doctor   User?     @relation(fields: [doctorId], references: [id], name: "DoctorConsultations", onDelete: SetNull)
  payment  Payment?
  disputes Dispute[]

  @@map("consultations")
}

model Specialty {
  id            String          @id @default(uuid())
  name          String          @unique()
  DoctorProfile DoctorProfile[]

  @@map("specialties")
}

model DoctorAvailability {
  id       String   @id @default(uuid())
  doctorId String
  date     DateTime
  time     String // Store time as a string like "10:00 AM", "11:00 AM"

  DoctorProfile   DoctorProfile? @relation(fields: [doctorProfileId], references: [id])
  doctorProfileId String?

  @@map("doctor_availabilities")
}

model Payment {
  id             String        @id @default(uuid())
  patientId      String?
  dDoctorId      String?
  consultationId String?       @unique
  dPatientId     String?
  doctorId       String?
  amount         Float
  status         PaymentStatus @default(PENDING)
  transactionId  String        @unique
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?

  patient      User?         @relation(fields: [patientId], references: [id], name: "PatientPayments", onDelete: SetNull)
  doctor       User?         @relation(fields: [doctorId], references: [id], name: "DoctorPayments", onDelete: SetNull)
  consultation Consultation? @relation(fields: [consultationId], references: [id])

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  recipientId String
  user        User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId])
}

model Review {
  id        String    @id @default(uuid())
  doctorId  String
  patientId String
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  doctor  User @relation(fields: [doctorId], references: [id], name: "DoctorReviews", onDelete: Cascade)
  patient User @relation(fields: [patientId], references: [id], name: "PatientReviews", onDelete: Cascade)
}

model Withdrawal {
  id            String           @id @default(uuid())
  doctorId      String?
  dDoctorId     String?
  amount        Float
  reference     String @unique
  status        WithdrawalStatus @default(PENDING)
  adminNotes    String? // Admin notes for approval/rejection
  statusHistory Json @default("[]") // Array of status change history

  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  rejectedAt  DateTime?

  doctor User? @relation(fields: [doctorId], references: [id], onDelete: SetNull)
}

model Referral {
  id                String         @id @default(uuid())
  referringDoctorId String
  specialistId      String
  patientId         String
  notes             String
  status            ReferralStatus @default(PENDING)
  createdAt         DateTime       @default(now())

  referringDoctor User @relation(fields: [referringDoctorId], references: [id], name: "referringDoctorReferral", onDelete: Cascade)
  specialist      User @relation(fields: [specialistId], references: [id], name: "specialistReferral", onDelete: Cascade)
  patient         User @relation(fields: [patientId], references: [id], name: "patientReferral", onDelete: Cascade)
}

model Role {
  id    String     @id @default(uuid())
  name  UserTypes  @unique
  users UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id])
}

model ArchivedUser {
  id             String   @id
  email          String
  name           String
  password       String
  archivedAt     DateTime @default(now())
  archivedReason String?
  originalRoles  String // JSON string of role IDs
  metadata       String? // Additional JSON metadata

  @@map("archived_users")
}

model BankAccount {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountName String
  accountNo   String
  bankName    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Dispute {
  id             String        @id @default(uuid())
  consultationId String
  doctorId       String
  patientId      String
  reason         String
  status         DisputeStatus @default(OPEN)
  description    String?
  resolution     String?
  resolutionAt   DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  consultation Consultation @relation(fields: [consultationId], references: [id])
  doctor       User         @relation("DoctorDisputes", fields: [doctorId], references: [id])
  patient      User         @relation("PatientDisputes", fields: [patientId], references: [id])
}
