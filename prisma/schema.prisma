// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Roles {
  ADMIN
  USER
  DOCTOR
}

enum SessionType {
  CHAT
  AUDIO
  VIDEO
  CLINIC
  HOME
}

enum AppointmentStatus {
  PENDING
  UPCOMING
  COMPLETED
  CONFIRMED
  CANCELLED
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String?
  dateOfBirth    DateTime?        @db.Date
  gender         Gender           @default(MALE)
  role           Roles            @default(USER)
  phoneNumber    String?          @unique
  address        String?
  medicalHistory MedicalHistory[]
  otp            String? // OTP for phone verification
  isVerified     Boolean?         @default(false)
  profilePicture String? // Photo URL
  googleId       String?          @unique
  appleId        String?          @unique
  wallet         Wallet?
  walletId       String?
  Doctor         Doctor?
  profiles       Profile[]
  sessions       Session[]
  transactions   Transaction[]
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  chatMessages   ChatMessage[]    @relation("UserChats")
  BookedFor      Appointment[]    @relation("BookedFor")
  refreshTokens  RefreshToken[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("users")
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  balance      Float         @default(0) // Store balance in smallest currency unit (e.g., cents)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("wallets")
}

model MedicalHistory {
  id            String  @id @default(uuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pastSurgeries Boolean
  currentMeds   Boolean
  drugAllergies Boolean
}

model Doctor {
  id                    String             @id @default(uuid())
  userId                String?            @unique
  user                  User?              @relation(fields: [userId], references: [id]) // Reference the user model to store authentication info
  specialization        String?
  experienceYears       Int?
  ratings               Float?             @default(0)
  certifications        String? // comma separated string of certifications
  location              String? //Store Address
  consultationTypes     SessionType[]
  fees                  Json? // { "video": 5000, "home": 10000, "clinic": 8000 }
  availability          Json? // { "2023-10-01": ["10:00", "11:00"], ... }
  isOnline              Boolean            @default(false)
  lastActive            DateTime?
  sessions              Session[]
  homeVisitCharge       Float? // added based on distance
  videoConsultationFee  Float?
  clinicConsultationFee Float?
  bio                   String?
  appointments          Appointment[]
  MedicalRecord         MedicalRecord[]
  chatMessages          ChatMessage[]      @relation("DoctorChats")
  DoctorSpecialty       DoctorSpecialty[]

  @@map("doctors")
}

model MedicalRecord {
  id                  String            @id @default(uuid())
  patientId           String
  patient             User              @relation(fields: [patientId], references: [id])
  doctorId            String?
  doctor              Doctor?           @relation(fields: [doctorId], references: [id])
  consultationSummary String?
  diagnosis           String?
  treatmentPlan       String?
  prescriptions       Prescription[]
  labResults          LabResult[]
  radiologyReports    RadiologyReport[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("medical_records")
}

model Prescription {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicationName  String
  dosage          String
  frequency       String
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("prescriptions")
}

model LabResult {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  testName        String
  result          String
  referenceRange  String?
  reportUrl       String? // URL to the lab report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("lab_results")
}

model RadiologyReport {
  id              String         @id @default(uuid())
  medicalRecordId String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  studyType       String
  finding         String?
  impression      String?
  reportUrl       String? // URL to the radiology report (e.g., PDF)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("radiology_reports")
}

model ChatMessage {
  id          String   @id @default(uuid())
  userId      String // patient
  user        User     @relation("UserChats", fields: [userId], references: [id])
  doctorId    String // doctor
  doctor      Doctor   @relation("DoctorChats", fields: [doctorId], references: [id])
  message     String
  attachments String? //  URL or JSON containing file information
  timestamp   DateTime @default(now())

  @@map("chat_messages")
}

model Session {
  id         String           @id @default(uuid())
  type       SessionType
  startTime  DateTime
  endTime    DateTime?
  userId     String
  doctorId   String
  profileId  String?
  user       User             @relation(fields: [userId], references: [id])
  doctor     Doctor           @relation(fields: [doctorId], references: [id])
  profile    Profile?         @relation(fields: [profileId], references: [id])
  symptoms   String?
  isReferral Boolean          @default(false)
}

model Profile {
  id       String    @id @default(uuid())
  fullName String
  contact  String
  gender   String
  age      Int
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  sessions Session[]
}

model Transaction {
  id        String          @id @default(uuid())
  amount    Int
  type      TransactionType
  promoCode String?
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  createdAt DateTime        @default(now())
  Wallet    Wallet?         @relation(fields: [walletId], references: [id])
  walletId  String?
}

enum TransactionType {
  TOP_UP
  CONSULTATION
  REFERRAL
}

model Appointment {
  id              String            @id @default(uuid())
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  patientId       String //Foreign Key to User if the User is Booking for themselves
  patient         User              @relation(fields: [patientId], references: [id]) //User Making the Appointment
  bookedForId     String?
  BookedFor       User?             @relation("BookedFor", fields: [bookedForId], references: [id]) //The actual patient
  appointmentTime DateTime
  status          AppointmentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("appointments")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model DoctorSpecialty {
  id        String @id @default(uuid())
  doctorId  String
  specialty String

  doctor Doctor @relation(fields: [doctorId], references: [id])
}

model Symptom {
  id       String @id @default(uuid())
  name     String @unique // e.g., "Fever", "Cough"
  category String // e.g., "Respiratory", "Gastrointestinal"
}
