// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" // or mysql, sqlite, etc.
    url      = env("DATABASE_URL")
}

model User {
    id             String          @id @default(uuid())
    name           String?
    email          String          @unique
    phoneNumber    String?         @unique
    password       String?
    profilePicture String? // URL to profile image
    gender         Gender?
    dateOfBirth    DateTime?
    address        String?
    isVerified     Boolean         @default(false)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    wallet         Wallet?
    appointments   Appointment[]
    medicalRecords MedicalRecord[]
    chatMessages   ChatMessage[]   @relation("UserChats")
    BookedFor      Appointment[]   @relation("BookedFor")
    Doctor         Doctor?

    @@map("users")
}

enum Gender {
    MALE
    FEMALE
}

model Wallet {
    id           String        @id @default(uuid())
    userId       String        @unique
    user         User          @relation(fields: [userId], references: [id])
    balance      Float         @default(0) // Store balance in smallest currency unit (e.g., cents)
    transactions Transaction[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@map("wallets")
}

model Transaction {
    id          String          @id @default(uuid())
    walletId    String
    wallet      Wallet          @relation(fields: [walletId], references: [id])
    type        TransactionType
    amount      Float // Store amount in smallest currency unit (e.g., cents)
    description String? // Optional description of the transaction
    createdAt   DateTime        @default(now())

    @@map("transactions")
}

enum TransactionType {
    TOP_UP
    REFUND
    BOOKING
}

model Doctor {
    id                    String             @id @default(uuid())
    userId                String             @unique
    user                  User               @relation(fields: [userId], references: [id]) // Reference the user model to store authentication info
    specialization        String?
    experienceYears       Int?
    ratings               Float?             @default(0)
    certifications        String? // comma separated string of certifications
    location              String? //Store Address
    consultationTypes     ConsultationType[]
    availability          String? // JSON representing available time slots
    homeVisitCharge       Float? // added based on distance
    videoConsultationFee  Float?
    clinicConsultationFee Float?
    bio                   String?
    appointments          Appointment[]
    MedicalRecord         MedicalRecord[]
    chatMessages          ChatMessage[]      @relation("DoctorChats")

    @@map("doctors")
}

enum ConsultationType {
    VIDEO
    HOME
    CLINIC
}

model Appointment {
    id              String            @id @default(uuid())
    doctorId        String
    doctor          Doctor            @relation(fields: [doctorId], references: [id])
    patientId       String //Foreign Key to User if the User is Booking for themselves
    patient         User              @relation(fields: [patientId], references: [id]) //User Making the Appointment
    bookedForId     String?
    BookedFor       User?             @relation("BookedFor", fields: [bookedForId], references: [id]) //The actual patient
    appointmentTime DateTime
    status          AppointmentStatus @default(PENDING)
    notes           String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    @@map("appointments")
}

enum AppointmentStatus {
    PENDING
    UPCOMING
    COMPLETED
    CONFIRMED
    CANCELLED
}

model MedicalRecord {
    id                  String            @id @default(uuid())
    patientId           String
    patient             User              @relation(fields: [patientId], references: [id])
    doctorId            String?
    doctor              Doctor?           @relation(fields: [doctorId], references: [id])
    consultationSummary String?
    diagnosis           String?
    treatmentPlan       String?
    prescriptions       Prescription[]
    labResults          LabResult[]
    radiologyReports    RadiologyReport[]
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt

    @@map("medical_records")
}

model Prescription {
    id              String         @id @default(uuid())
    medicalRecordId String?
    medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
    medicationName  String
    dosage          String
    frequency       String
    notes           String?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    @@map("prescriptions")
}

model LabResult {
    id              String         @id @default(uuid())
    medicalRecordId String?
    medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
    testName        String
    result          String
    referenceRange  String?
    reportUrl       String? // URL to the lab report (e.g., PDF)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    @@map("lab_results")
}

model RadiologyReport {
    id              String         @id @default(uuid())
    medicalRecordId String?
    medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
    studyType       String
    finding         String?
    impression      String?
    reportUrl       String? // URL to the radiology report (e.g., PDF)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    @@map("radiology_reports")
}

model ChatMessage {
    id          String   @id @default(uuid())
    userId      String // patient
    user        User     @relation("UserChats", fields: [userId], references: [id])
    doctorId    String // doctor
    doctor      Doctor   @relation("DoctorChats", fields: [doctorId], references: [id])
    message     String
    attachments String? //  URL or JSON containing file information
    timestamp   DateTime @default(now())

    @@map("chat_messages")
}
